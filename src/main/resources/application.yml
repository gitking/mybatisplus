spring:
  # 配置数据源信息
  datasource:
    # 配置数据源类型
#    type: com.zaxxer.hikari.HikariDataSource
#    # 配置数据库驱动类
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    # 注意这个url跟mysql的版本有关系
#    # mysql5的版本URL这样写:jdbc:mysql://localhost:3306/mybatis_plus?characterEncodiing=utf-8&useSSL=false
#    # mysql8的版本URL这样写: jdbc:mysql://localhost:3306/mybatis_plus?serverTimeZone=GMT%2B8&characterEncoding=utf-8&useSSL=false
#    # 多了一个时区的参数
#    url: jdbc:mysql://localhost:3306/mybatis_plus?serverTimeZone=GMT%2B8&characterEncoding=utf-8&useSSL=false
#    username: root
#    password: 123456
    # dynamic 配置多数据源
    dynamic:
      # 设置默认的数据源或者数据源组, 默认值为master，这个名字其实可以随便起，叫abc也行
      primary: master
      # strice的意思是严格，严格匹配数据源，默认为false,true的话匹配不到指定数据源时会抛异常，false的话会使用默认数据源
      strict: false
      datasource:
        # 这里的master必须跟primary的值保持一致,primary叫abc，这里也得叫abc
        master:
          url: jdbc:mysql://localhost:3306/mybatis_plus?serverTimeZone=GMT%2B8&characterEncoding=utf-8&useSSL=false
          driver-class-name: com.mysql.cj.jdbc.Driver
          username: root
          password: 123456
        slave_1:
          url: jdbc:mysql://localhost:3306/mybatis_plus1?serverTimeZone=GMT%2B8&characterEncoding=utf-8&useSSL=false
          driver-class-name: com.mysql.cj.jdbc.Driver
          username: root
          password: 123456


mybatis-plus:
  configuration:
    # log日志，这个配置可以让mybatis输出对应的SQL语句
    log-impl:
      org.apache.ibatis.logging.stdout.StdOutImpl
    # 注意,MyBatisPlus默认的mapper配置文件是在classpath下面的mapper文件夹下面，也就是resources下面的mapper下面。如果resources文件夹下面有mapper文件，
    # 那么你就可以不用配mybatis-plus.mapper-locations这个属性。如果你想自定义mapper的路径，你就配置mybatis-plus.mapper-locations这个属性就行了。
  # 设置MyBatis-plus的全局配置
  global-config:
    db-config:
      # 对所有实体类对应的表面前面加t_
      table-prefix: t_
      # 设置统一的主键生成策略
      id-type: auto
    # 关闭mybatis-plus的banner
    banner: false
  # 配置类型别名对应的包
  type-aliases-package: com.atguigu.*.pojo
  # 扫描通用枚举的包
  type-enums-package: com.atguigu.mybatisplus.enums

xxl:
  job:
    # accessToken 允许访问的Token，这个值可以为空，但是这个配置必须要有,这个配置必须要跟xxl-job-admin里面的token一样
    accessToken: default_token
    admin:
      # XXL-JOB的调度中心地址,我们这个项目启动成功之后要把自己当做服务注册到XXL-JOB的调度中心上面去
      addresses: http://localhost:8080/xxl-job-admin/
    executor:
      # 日志存放路径
      logpath: D:/deplog/xxl-job-handler
      # 这个是我们这个项目跟调度平台通信的一个端口,调度平台要通过这个端口来告诉我们该执行定时任务了。
      port: ${random.int[9000,10000]}
      # 集群部署的话，appname要保持一致
      appname: xxl-job-test
      # xxl-job executor registry-address: default use address to registry , otherwise use ip:port if address is null
      address:
      ### xxl-job executor server-info
      ip:
      ### xxl-job executor log-retention-days
      logretentiondays: 30

# 我们这个项目是一个WEB项目,需要配置WEB项目的端口
server:
  # 因为我们要模拟执行器机器部署，打包后单机运行多次,为服务设置随机端口
  port: ${random.int[10000,19999]}

